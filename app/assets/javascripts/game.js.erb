  


  var initLoad =  function() {

  let $boardContainer = document.querySelector('.board-container'); //grabs the div added to the index page -JB
  let $table = document.createElement("table"); 
  let $piecesContainer = document.querySelector('.pieces-container');
 

  function buildBoard() {

    for (let y = 0; y < 8; y++) {   
        var $tr = document.createElement('tr');
        for (let x = 0; x < 8; x++) {
            var $td = document.createElement('td');
            $td.setAttribute('data-x', x)
            $td.setAttribute('data-y', y)
            $td.setAttribute('ondragover', 'onDragOver(event);')
            $td.setAttribute('ondrop', 'onDrop(event);') //grabs the row iterator (i) and the cell iterator (n) and uses them for the coords! -JB

            if (x%2 == y%2) {           //every even square is white, odd is black -JB
                $td.className = "black square";
            } else {
                $td.className = "white square";
            }
            $tr.appendChild($td);
             
            $td.addEventListener('click', handleGetCoord);     
        }
        $table.appendChild($tr);
          }

      if ($boardContainer) {
        $boardContainer.appendChild($table);
      }
    }

  buildBoard();




  getID(); 

  function getID() {
    let gameID = location.pathname.split('/')[2];
    if (gameID) {
      getGamePieces(gameID);
    }
  }

  function getGamePieces(id) {
       $.ajax({
          url: `/get_pieces/${id}`,
          method: 'get',

       }).then(function (data) {
         let pieces = data; 
         // console.log(pieces);
         pieces.forEach(function (piece) {
          var row = $boardContainer.querySelector(`[data-x="${piece.x_position}"][data-y="${piece.y_position}"]`);
           if (row){
            var div = document.createElement('div');
            div.className = 'piece';
            div.setAttribute('draggable', 'true');
            div.setAttribute('ondragstart', 'onDragStart(event);');
            div.setAttribute('id', piece.id);
            div.setAttribute('x', piece.x_position);
            div.setAttribute('y', piece.y_position);
            div.className = "piece-image";
            div.innerHTML = `<img class="piece-jpg" src='/${piece.image}/'>`;
            // span.append(piece.id);

            row.appendChild(div);
           }

         })

       })
        
  }     

 }



 $(document).
 off('turbolinks:load', initLoad)
 .on('turbolinks:load', initLoad);


function onDragStart(event) {
  console.log(event.target.parentElement);
  event.dataTransfer.setData("text/plain", event.target.parentElement.id); //this grabs the id attribute that I set for the spans that currently equals piece.id
  
}

function onDragOver(event) { //here we can set styling to any of the boxes as the piece is dragged over them, such as highlighting
  event.preventDefault();
}

function onDrop(event) {
  // debugger;
  console.log(event);
  const droppedArea = event.currentTarget;
  var isOccupied = false;
  if (droppedArea.children.length) {
    isOccupied = true;
  }

  const display = event
    .dataTransfer
    .getData("text/plain"); //this passes the id that we grabbed above to the new child element that we are 
                      //appending to the new box to make sure the correct piece is moved
  // console.log(display);
  const draggableElement = document.getElementById(display);
  const dropzone = event.target

  var x_position = dropzone.getAttribute('data-x');
  var y_position = dropzone.getAttribute('data-y');
  
  var drop_piece = dropzone.parentElement.id; 
  var x_drop = dropzone.parentElement.getAttribute('x');
  var y_drop = dropzone.parentElement.getAttribute('y');
  if (x_position == null) {
    x_position = x_drop;
  }
  if (y_position == null) {
    y_position = y_drop;
  }
  console.log({x_position, y_position, display, x_drop, y_drop})
  

  $.ajax({
    url: `/pieces/${display}`,
    method: 'PUT',
    data: {
      x_position: x_position, 
      y_position: y_position, 
      x_drop: x_drop,
      y_drop: y_drop
    },
    dataType: 'json'     
  }).done( function() {
    if (isOccupied) {
      droppedArea.children[0].remove()
      droppedArea.appendChild(draggableElement);

    }
    event.dataTransfer.clearData();
   }).fail(function (err, a, b) {
    console.log('error in update', {err, a, b});
   });
}




function handleGetCoord(event) {
     var $td = event.target; 
     var coordx =  $td.getAttribute('data-x');
     var coordy = $td.getAttribute('data-y');
     console.log(coordx, coordy);
}
